name: Release

on:
  workflow_dispatch:
    inputs:
      impact:
        description: 'Release impact'
        required: true
        type: choice
        options:
          - patch
          - minor
          - major
        default: patch
      publish_to_pypi:
        description: 'Publish to PyPI'
        required: true
        type: boolean
        default: false
      dry_run:
        description: 'Test mode (no pushes or releases)'
        required: true
        type: boolean
        default: true

permissions:
  contents: write  # Needed for creating releases
  pull-requests: write
  id-token: write
  # Add permission for code-scanning
  security-events: write

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for changelog generation
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
        check-latest: true
        
    - name: Cache Python dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-release-${{ hashFiles('pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-release-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine check-wheel-contents semver tomli
        pip install -e ".[dev]"
    
    - name: Run tests
      run: |
        pytest
    
    - name: Determine version and release type
      id: version
      run: |
        # Get current branch
        BRANCH=$(git rev-parse --abbrev-ref HEAD)
        
        # Determine if this is a production branch
        if [[ "$BRANCH" == "main" || "$BRANCH" == "master" ]]; then
          echo "IS_PRODUCTION=true" >> $GITHUB_OUTPUT
          echo "PRERELEASE=false" >> $GITHUB_OUTPUT
        else
          echo "IS_PRODUCTION=false" >> $GITHUB_OUTPUT
          echo "PRERELEASE=true" >> $GITHUB_OUTPUT
          if [[ "${{ inputs.dry_run }}" == "false" && "$BRANCH" != release/* ]]; then
            echo "Error: Non-dry-run releases from feature branches must use release/* branch pattern"
            exit 1
          fi
        fi
        
        # Read current version from pyproject.toml
        CURRENT_VERSION=$(python -c "import tomli; print(tomli.load(open('pyproject.toml', 'rb'))['project']['version'])")
        
        # Calculate new version based on impact
        NEW_VERSION=$(python -c "
import semver
current = semver.Version.parse('${CURRENT_VERSION}')
impact = '${{ inputs.impact }}'
if impact == 'major':
    new_ver = current.bump_major()
elif impact == 'minor':
    new_ver = current.bump_minor()
else:
    new_ver = current.bump_patch()
print(str(new_ver))
        ")
        
        # If not production, append pre-release identifier
        if [[ "$(cat $GITHUB_OUTPUT | grep IS_PRODUCTION=true)" == "" ]]; then
          NEW_VERSION="${NEW_VERSION}-rc.$(date +%Y%m%d%H%M%S)"
        fi
        
        echo "NEW_VERSION=${NEW_VERSION}" >> $GITHUB_OUTPUT
        echo "Calculated version: ${NEW_VERSION}"

    - name: Update version
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        NEW_VERSION: ${{ steps.version.outputs.NEW_VERSION }}
      run: |
        # Update pyproject.toml
        python -c "
import tomli, tomli_w
with open('pyproject.toml', 'rb') as f:
    data = tomli.load(f)
data['project']['version'] = '${NEW_VERSION}'
with open('pyproject.toml', 'wb') as f:
    tomli_w.dump(data, f)
"
        
        # Update __init__.py
        PACKAGE_DIR=$(python -c "import tomli; print(tomli.load(open('pyproject.toml', 'rb'))['project']['name'])")
        mkdir -p "${PACKAGE_DIR}"
        echo "__version__ = \"${NEW_VERSION}\"" > "${PACKAGE_DIR}/__init__.py"
        
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        git add pyproject.toml "${PACKAGE_DIR}/__init__.py"
        git commit -m "Bump version to ${NEW_VERSION}"
        git tag -a "v${NEW_VERSION}" -m "Release v${NEW_VERSION}"
        
        if [ "${{ inputs.dry_run }}" = "false" ]; then
          if [ "${{ steps.version.outputs.IS_PRODUCTION }}" = "true" ]; then
            git push origin HEAD:main
          fi
          git push origin "v${NEW_VERSION}"
        else
          echo "Running in test mode - skipping git pushes"
          echo "Would have pushed:"
          echo "  - Version bump commit"
          echo "  - Tag v${NEW_VERSION}"
        fi

    - name: Build package
      run: python -m build
    
    - name: Verify package contents
      run: |
        check-wheel-contents dist/*.whl
        twine check dist/*

    - name: Generate Release Notes
      run: |
        # Get the previous tag, fallback to first commit if no tags exist
        PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || git rev-list --max-parents=0 HEAD)
        
        # Generate release notes
        echo "# AIPR v${NEW_VERSION}" > release_notes.md
        echo "" >> release_notes.md
        echo "## What's Changed" >> release_notes.md
        echo "" >> release_notes.md
        
        # Get commits since last release or first commit
        git log ${PREV_TAG}..HEAD --pretty=format:"* %s" >> release_notes.md
        
        # Add installation instructions
        echo "" >> release_notes.md
        echo "## Installation" >> release_notes.md
        echo "" >> release_notes.md
        echo "\`\`\`bash" >> release_notes.md
        echo "# Install using pipx (recommended)" >> release_notes.md
        echo "pipx install aipr" >> release_notes.md
        echo "" >> release_notes.md
        echo "# Or install using pip" >> release_notes.md
        echo "pip install aipr" >> release_notes.md
        echo "\`\`\`" >> release_notes.md
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2.2.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        body_path: release_notes.md
        files: |
          dist/*.whl
          dist/*.tar.gz
        tag_name: v${NEW_VERSION}
        draft: false
        prerelease: ${{ steps.version.outputs.PRERELEASE }}
        fail_on_unmatched_files: true
        generate_release_notes: false
    
    - name: Check PyPI token
      if: inputs.publish_to_pypi
      run: |
        if [ -z "${{ secrets.PYPI_API_TOKEN }}" ]; then
          echo "Error: PYPI_API_TOKEN secret is not set"
          exit 1
        fi
    
    - name: Publish to PyPI
      if: inputs.publish_to_pypi
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        twine upload dist/* 